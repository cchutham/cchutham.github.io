{"version":3,"sources":["webpack:///./src/pages/projects/account-management.tsx","webpack:///./src/components/image-box.tsx","webpack:///./src/components/image-box.module.scss","webpack:///./src/pages/projects/styles.module.scss"],"names":["ACPage","render","react__WEBPACK_IMPORTED_MODULE_1__","_components_project_layout__WEBPACK_IMPORTED_MODULE_6__","allProjects","this","props","data","edges","map","e","node","currentProject","project","mainImage","childImageSharp","fluid","reactstrap__WEBPACK_IMPORTED_MODULE_3__","className","lg","sharedStyles","_components_image_box__WEBPACK_IMPORTED_MODULE_5__","src","getImageUrl","alt","filename","withPrefix","imageFolder","React","pageQuery","ImageBox","_React$Component","_this","call","state","isModalOpen","toggleModal","bind","_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1___default","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0___default","_proto","prototype","setState","react__WEBPACK_IMPORTED_MODULE_2__","styles","onClick","isOpen","toggle","centered","fade","charCode","color","module","exports","imageBox","modal","imageTitle","quote"],"mappings":"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","file":"component---src-pages-projects-account-management-tsx-fbacc998a04495ecc9c2.js","sourcesContent":["import * as React from \"react\";\nimport * as sharedStyles from \"./styles.module.scss\";\nimport { Col, Container, Row } from \"reactstrap\";\nimport { graphql, withPrefix } from \"gatsby\";\nimport { ImageBox } from \"../../components/image-box\";\nimport { ProjectLayout } from \"../../components/project-layout\";\nimport { ProjectPageProps } from \"../../models/project-page-props\";\n\nexport default class ACPage extends React.Component<ProjectPageProps, {}> {\n  public render() {\n    return (\n      <ProjectLayout\n        allProjects={this.props.data.allProjects.edges.map(e => e.node)}\n        currentProject={this.props.data.project.edges[0].node}\n        mainImage={this.props.data.mainImage.childImageSharp.fluid}\n      >\n        <Container>\n          <Row className=\"justify-content-center\">\n            <Col lg=\"10\">\n              <h3>About The Company</h3>\n              <p>\n                PlanGrid’s primary objective is to make intuitive and impactful\n                technology for people in the construction industry. Its\n                construction productivity software doesn’t only allow field\n                workers to store, view, and share blueprints, but also enables\n                stakeholders in a project to work together throughout the\n                project life cycle.\n              </p>\n            </Col>\n          </Row>\n          <Row className=\"justify-content-center\">\n            <Col lg=\"10\">\n              <h3>Background</h3>\n              <p>\n                The Admin Console is a part of PlanGrid web products that allows\n                IT administrators to add, remove, and manage user accounts as\n                well as to purchase PlanGrid licenses for users who involve in\n                organization projects.\n              </p>\n              <p>\n                PlanGrid offers multiple types of licenses, and each comes with\n                a different number of sheet storage limit. The licenses range\n                from basic ones that come with limited sheet storage to the most\n                expensive one that allows unlimited sheet storage.\n              </p>\n            </Col>\n          </Row>\n\n          <Row className=\"justify-content-center\">\n            <Col lg=\"10\">\n              <h3>Problems</h3>\n              <p className={sharedStyles.quote}>\n                With the current system, IT administrators have a limited\n                capability to monitor license usage. While they see information\n                such as the number of available and used licenses, they are\n                unable to access a list of projects that their users are working\n                on.\n              </p>\n              <p>\n                There are times when employees use company license to work on\n                their personal projects. Problems occur when they run out of\n                sheet storage and request for a license upgrade. Since the IT\n                admins can't see list of projects that the employees are working\n                on, it's challenging to know if the extra storage is required\n                for the company work. As a result, the company has to\n                unnecessary pay extra to upgrade licenses for these employees.\n              </p>\n            </Col>\n          </Row>\n          <Row className=\"justify-content-center\">\n            <Col lg=\"10\">\n              <h3>Project Goal</h3>\n\n              <p>\n                The overall goal of this project is to design a workflow that\n                allowed the IT administrators to set up organization ownership\n                of user accounts in addition to the existing workflow. This\n                feature will enables the IT admins to see lists of project that\n                their users are working on.\n              </p>\n            </Col>\n          </Row>\n\n          <Row className=\"justify-content-center\">\n            <Col lg=\"10\">\n              <h3>The Current Admin Console</h3>\n              <p>\n                The current version of Admin Console consists of two major\n                components: the usage of different license types and the user\n                log that display a list of people working on company projects.\n                The IT admins can click \"add license\" button to buy more\n                licenses and click \"new users\" button to add more people to the\n                organization.\n                <p>\n                  From a design perspective, not every part of the Admin Console\n                  is built using components from PlanGrid’s design system. For\n                  example, the “more options icon” at the end of the row of user\n                  log doesn’t exist in other parts of PlanGrid web app.\n                </p>\n              </p>\n            </Col>\n          </Row>\n          <Row className=\"justify-content-center\">\n            <Col lg=\"10\">\n              <ImageBox\n                src={this.getImageUrl(\"current-AC.jpg\")}\n                alt=\"Current Admin Console UI\"\n                className=\"img-fluid\"\n              />\n            </Col>\n          </Row>\n          <Row className=\"justify-content-center\">\n            <Col lg=\"10\">\n              <h3>Designing the Solution</h3>\n              <h4>User Flow</h4>\n              <p>\n                During project onboarding, I worked with a project manager to\n                understand project scope and gather feature requirements. From\n                there, I created a user workflow diagram to explore and identify\n                different paths that the IT admins could perform to complete\n                their tasks. In the diagram, an IT admin can add new users or\n                manage the existing users. If he decides to manage a user, he’ll\n                send a request to manage the user account. If he just wants the\n                user to work on company projects, he’ll send an invitation to\n                the user to join the organization. On the other end, the user\n                can accept or reject the request or the invitation.\n              </p>\n              <p>\n                In addition to this user flow diagram, you can also check out a\n                complete version of user workflow map here.\n              </p>\n            </Col>\n          </Row>\n          <Row className=\"justify-content-center\">\n            <Col lg=\"10\">\n              <ImageBox\n                src={this.getImageUrl(\"flow.png\")}\n                alt=\"Current Admin Console UI\"\n                className=\"img-fluid\"\n              />\n            </Col>\n          </Row>\n\n          <Row className=\"justify-content-center\">\n            <Col lg=\"10\">\n              <h4>Wireframes</h4>\n              <p>lorem ipsum</p>\n            </Col>\n          </Row>\n\n          <Row className=\"justify-content-center\">\n            <Col lg=\"5\">\n              <ImageBox\n                src={this.getImageUrl(\"add-new-user.jpg\")}\n                alt=\"Collect information using sticky notes\"\n                className=\"img-fluid\"\n              />\n            </Col>\n            <Col lg=\"5\">\n              <ImageBox\n                src={this.getImageUrl(\"invite-existing-user.jpg\")}\n                alt=\"Whiteboard with research\"\n                className=\"img-fluid\"\n              />\n            </Col>\n          </Row>\n          <Row className=\"justify-content-center\">\n            <Col lg=\"10\">\n              <h3>Enhance the User Experience</h3>\n              <p>1. The modal box for add new user flow</p>\n              <p>\n                The current design of the modal box requires the IT admins to\n                scroll back and forth to view license options and email\n                addresses they've entered. By adding account management section\n                to the box, its height will increases even more. Since the modal\n                box handles a goal-oriented task, the endless scrolling in the\n                current design might prevent the IT admins to quickly accomplish\n                their tasks. As a result, I decided to explore a new design\n                pattern that would solve the endless scrolling problem. I\n                divided the box into 2 columns and placed the account management\n                section on the left side and the license option to the right\n                side.\n              </p>\n              <p>2. In flow license purchase</p>\n              <p>\n                The current design of the modal box requires the IT admins to\n                scroll back and forth to view license options and email\n                addresses they've entered. By adding account management section\n                to the box, its height will increases even more. Since the modal\n                box handles a goal-oriented task, the endless scrolling in the\n                current design might prevent the IT admins to quickly accomplish\n                their tasks. As a result, I decided to explore a new design\n                pattern that would solve the endless scrolling problem. I\n                divided the box into 2 columns and placed the account management\n                section on the left side and the license option to the right\n                side.\n              </p>\n            </Col>\n          </Row>\n          <Row className=\"justify-content-center\">\n            <Col lg=\"10\">\n              <h3>In flow license purchase</h3>\n              <p>\n                Currently, the IT admins can only purchase licenses from a user\n                log page. They will have to abandon the add new users flow to go\n                back to the user log and purchase additional licenses before\n                being able to add new users. This process can waste their time\n                and increase their frustration level. Therefore, I'm designing a\n                workflow and user interfaces that will allow the IT admins to\n                buy additional licenses without having to discard the entire\n                process.\n              </p>\n            </Col>\n          </Row>\n        </Container>\n      </ProjectLayout>\n    );\n  }\n\n  private getImageUrl(filename: string) {\n    return withPrefix(\n      `/images/${this.props.data.project.edges[0].node.imageFolder}/${filename}`\n    );\n  }\n}\n\nexport const pageQuery = graphql`\n  query ACQuery($path: String!) {\n    allProjects: allProjectsJson {\n      ...ProjectFields\n    }\n    project: allProjectsJson(filter: { url: { eq: $path } }) {\n      ...ProjectFields\n    }\n    mainImage: file(relativePath: { eq: \"AC/main.png\" }) {\n      ...MainImageSizes\n    }\n  }\n`;\n","import * as React from \"react\";\r\nimport { Modal, ModalBody, ModalFooter, Button, ModalHeader } from \"reactstrap\";\r\nimport * as styles from \"./image-box.module.scss\";\r\n\r\nexport interface ImageBoxProps {\r\n  src: string;\r\n  alt?: string;\r\n  className?: string;\r\n}\r\n\r\nexport interface ImageBoxState {\r\n  isModalOpen: boolean;\r\n}\r\n\r\nexport class ImageBox extends React.Component<ImageBoxProps, ImageBoxState> {\r\n  constructor(props: ImageBoxProps) {\r\n    super(props);\r\n    this.state = {\r\n      isModalOpen: false,\r\n    };\r\n    this.toggleModal = this.toggleModal.bind(this);\r\n  }\r\n\r\n  public toggleModal() {\r\n    this.setState({\r\n      isModalOpen: !this.state.isModalOpen,\r\n    });\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <>\r\n        <img\r\n          src={this.props.src}\r\n          alt={this.props.alt}\r\n          className={`${styles.imageBox} ${this.props.className}`}\r\n          onClick={this.toggleModal}\r\n        />\r\n        <Modal\r\n          isOpen={this.state.isModalOpen}\r\n          toggle={this.toggleModal}\r\n          centered={true}\r\n          fade={false}\r\n          className={styles.modal}\r\n        >\r\n          <ModalHeader toggle={this.toggleModal} charCode=\"X\">\r\n            {this.props.alt}\r\n          </ModalHeader>\r\n          <ModalBody className=\"text-center\">\r\n            <img\r\n              src={this.props.src}\r\n              alt={this.props.alt}\r\n              className={this.props.className}\r\n            />\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color=\"primary\" onClick={this.toggleModal}>\r\n              Close\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imageBox\":\"image-box-module--image-box--1b_2B\",\"modal\":\"image-box-module--modal--6kXAf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imageTitle\":\"styles-module--image-title--16noi\",\"quote\":\"styles-module--quote--2RFU9\"};"],"sourceRoot":""}